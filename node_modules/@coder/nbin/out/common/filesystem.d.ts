/// <reference types="node" />
import * as fs from "fs";
import * as nbin from "nbin";
interface Stat {
    readonly isFile: boolean;
    readonly isDirectory: boolean;
    readonly size: number;
}
interface File {
    readonly byteLength: number;
    readonly byteOffset: number;
    read(offset?: number, length?: number): Promise<Buffer>;
    readSync(offset?: number, length?: number): Buffer;
}
export interface ReadableFilesystemProvider {
    readContents: (offset: number, length: number) => Promise<Buffer>;
    readContentsSync: (offset: number, length: number) => Buffer;
}
export declare class ReadableFilesystem implements nbin.Filesystem {
    private readonly directories;
    static fromBuffer(buffer: Buffer, provider: ReadableFilesystemProvider): ReadableFilesystem;
    protected readonly files: Map<string, File>;
    private ls;
    private stat;
    private cd;
    private read;
    private readSync;
    readFile(pathName: fs.PathLike, encoding?: "buffer", offset?: number, length?: number): Promise<Buffer>;
    readFile(pathName: fs.PathLike, encoding?: "utf8", offset?: number, length?: number): Promise<string>;
    readFileSync(pathName: fs.PathLike, encoding?: "buffer", offset?: number, length?: number): Buffer;
    readFileSync(pathName: fs.PathLike, encoding?: "utf8", offset?: number, length?: number): string;
    existsSync: (pathName: fs.PathLike) => boolean;
    readdirSync(pathName: fs.PathLike): ReadonlyArray<string>;
    statSync(pathName: fs.PathLike): Stat;
    /**
     * Will split the inputted path and attempt to nest down the tree to find the
     * file system for the specified path.
     */
    private getFilesystem;
}
export declare class WritableFilesystem {
    private readonly parent?;
    private readonly directories;
    protected readonly files: Map<string, Buffer>;
    private readonly contentBuffers;
    private contentLength;
    constructor(parent?: WritableFilesystem | undefined);
    /**
     * Write a file.
     */
    write(name: string, value: Buffer): void;
    cd(name: string): WritableFilesystem;
    build(): {
        readonly header: Buffer;
        readonly fileContents: Buffer;
    };
    private toBuffer;
    private headerSize;
    /**
     * Bubbles to the main filesystem. Stores a buffer
     * and returns the offset it'll be stored at.
     */
    private store;
}
export {};
