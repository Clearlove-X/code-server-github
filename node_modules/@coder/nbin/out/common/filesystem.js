"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var buffer_1 = require("./buffer");
var error_1 = require("./error");
var ReadableFilesystem = /** @class */ (function () {
    function ReadableFilesystem() {
        var _this = this;
        this.directories = new Map();
        this.files = new Map();
        this.existsSync = function (pathName) {
            var stat = _this.statSync(pathName);
            return stat.isFile || stat.isDirectory;
        };
    }
    ReadableFilesystem.fromBuffer = function (buffer, provider) {
        var offset = 0;
        var dirAmount = buffer.readUInt16BE(offset);
        offset += 2;
        var directory = new ReadableFilesystem();
        for (var i = 0; i < dirAmount; i++) {
            var dirName = buffer_1.readString(buffer, offset);
            offset = dirName.offset;
            var dirSliceLen = buffer.readUInt32BE(offset);
            offset += 4;
            directory.directories.set(dirName.value, ReadableFilesystem.fromBuffer(buffer.slice(offset, offset + dirSliceLen), provider));
            offset += dirSliceLen;
        }
        var fileAmount = buffer.readUInt16BE(offset);
        offset += 2;
        var _loop_1 = function (i) {
            var fileName = buffer_1.readString(buffer, offset);
            offset = fileName.offset;
            var byteOffset = buffer.readUInt32BE(offset);
            offset += 4;
            var byteLength = buffer.readUInt32BE(offset);
            offset += 4;
            directory.files.set(fileName.value, {
                byteLength: byteLength,
                byteOffset: byteOffset,
                read: function (offset, length) {
                    if (offset === void 0) { offset = 0; }
                    if (length === void 0) { length = byteLength; }
                    offset = Math.min(byteOffset + offset, byteOffset + byteLength);
                    length = Math.min(length, byteLength, byteOffset + byteLength - offset);
                    return provider.readContents(offset, length);
                },
                readSync: function (offset, length) {
                    if (offset === void 0) { offset = 0; }
                    if (length === void 0) { length = byteLength; }
                    offset = Math.min(byteOffset + offset, byteOffset + byteLength);
                    length = Math.min(length, byteLength, byteOffset + byteLength - offset);
                    return provider.readContentsSync(offset, length);
                },
            });
        };
        for (var i = 0; i < fileAmount; i++) {
            _loop_1(i);
        }
        return directory;
    };
    ReadableFilesystem.prototype.ls = function () {
        return __spreadArrays(Array.from(this.directories.keys()), Array.from(this.files.keys()));
    };
    ReadableFilesystem.prototype.stat = function (name) {
        var file = this.files.get(name);
        return {
            isFile: !!file,
            isDirectory: this.directories.has(name),
            size: file ? file.byteLength : 0,
        };
    };
    ReadableFilesystem.prototype.cd = function (name) {
        return this.directories.get(name);
    };
    ReadableFilesystem.prototype.read = function (name, offset, length) {
        var file = this.files.get(name);
        if (!file) {
            return Promise.reject(error_1.createNotFound());
        }
        return file.read(offset, length);
    };
    ReadableFilesystem.prototype.readSync = function (name, offset, length) {
        var file = this.files.get(name);
        if (!file) {
            throw error_1.createNotFound();
        }
        return file.readSync(offset, length);
    };
    ReadableFilesystem.prototype.readFile = function (pathName, encoding, offset, length) {
        return __awaiter(this, void 0, void 0, function () {
            var res, b;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        res = this.getFilesystem(pathName);
                        if (!res) {
                            throw error_1.createNotFound();
                        }
                        return [4 /*yield*/, res.fs.read(res.name, offset, length)];
                    case 1:
                        b = _a.sent();
                        if (encoding && encoding === "utf8") {
                            return [2 /*return*/, b.toString()];
                        }
                        return [2 /*return*/, b];
                }
            });
        });
    };
    ReadableFilesystem.prototype.readFileSync = function (pathName, encoding, offset, length) {
        var res = this.getFilesystem(pathName);
        if (!res) {
            throw error_1.createNotFound();
        }
        var b = res.fs.readSync(res.name, offset, length);
        if (encoding && encoding === "utf8") {
            return b.toString();
        }
        return b;
    };
    ReadableFilesystem.prototype.readdirSync = function (pathName) {
        var res = this.getFilesystem(pathName);
        if (!res) {
            throw error_1.createNotFound();
        }
        var filesystem = res.fs.cd(res.name);
        if (!filesystem) {
            throw error_1.createNotFound();
        }
        return filesystem.ls();
    };
    ReadableFilesystem.prototype.statSync = function (pathName) {
        var res = this.getFilesystem(pathName);
        if (!res) {
            return {
                isDirectory: false,
                isFile: false,
                size: 0,
            };
        }
        return res.fs.stat(res.name);
    };
    /**
     * Will split the inputted path and attempt to nest down the tree to find the
     * file system for the specified path.
     */
    ReadableFilesystem.prototype.getFilesystem = function (fullPath) {
        var parts = path
            .normalize(fullPath.toString())
            .split(path.sep)
            .filter(function (i) { return i.length; });
        var filesystem = this;
        var last = parts.length - 1;
        for (var i = 0; i < last; ++i) {
            if (!filesystem) {
                break;
            }
            var part = parts[i];
            filesystem = filesystem.cd(part);
        }
        return filesystem && { fs: filesystem, name: parts[last] };
    };
    return ReadableFilesystem;
}());
exports.ReadableFilesystem = ReadableFilesystem;
var WritableFilesystem = /** @class */ (function () {
    function WritableFilesystem(parent) {
        this.parent = parent;
        this.directories = new Map();
        this.files = new Map();
        this.contentBuffers = [];
        this.contentLength = 0;
    }
    /**
     * Write a file.
     */
    WritableFilesystem.prototype.write = function (name, value) {
        this.files.set(name, value);
    };
    WritableFilesystem.prototype.cd = function (name) {
        if (this.directories.has(name)) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            return this.directories.get(name);
        }
        var dir = new WritableFilesystem(this);
        this.directories.set(name, dir);
        return dir;
    };
    WritableFilesystem.prototype.build = function () {
        return {
            header: this.toBuffer(),
            fileContents: Buffer.concat(this.contentBuffers),
        };
    };
    WritableFilesystem.prototype.toBuffer = function () {
        var dirs = Array.from(this.directories.values()).map(function (dir) { return dir.toBuffer(); });
        var dirNames = Array.from(this.directories.keys());
        var files = Array.from(this.files.keys());
        var headerSize = this.headerSize(dirs);
        var buffer = Buffer.alloc(headerSize);
        var offset = 0;
        // Storing the amount of directories
        offset = buffer.writeUInt16BE(dirs.length, offset);
        for (var i = 0; i < dirs.length; i++) {
            var dir = dirs[i];
            // Storing the directory name
            offset = buffer_1.writeString(buffer, dirNames[i], offset);
            // Writing the length of the dir slice
            offset = buffer.writeUInt32BE(dir.byteLength, offset);
            // Up until here is fine
            // Writing the dirslice
            buffer.set(dir, offset);
            offset += dir.byteLength;
        }
        // Storing the amount of files
        offset = buffer.writeUInt16BE(files.length, offset);
        for (var i = 0; i < files.length; i++) {
            var file = this.files.get(files[i]);
            if (!file) {
                throw new Error(files[i] + " does not exist");
            }
            // Writing the file path
            offset = buffer_1.writeString(buffer, files[i], offset);
            // Writing the resource length offset.
            // This offset is set from the beginning of the header.
            var resourceOffset = this.store(file);
            offset = buffer.writeUInt32BE(resourceOffset, offset);
            offset = buffer.writeUInt32BE(file.byteLength, offset);
        }
        return buffer;
    };
    WritableFilesystem.prototype.headerSize = function (dirs) {
        var dirNames = Array.from(this.directories.keys());
        var files = Array.from(this.files.keys());
        var headerSize = 2 + // # of dirs
            dirs
                .map(function (d, i) {
                // 2 byte for str len, then string
                var dirNameLen = 2 + Buffer.byteLength(dirNames[i], "utf8");
                // Length of subdir slice
                var dirLen = 4;
                return dirNameLen + dirLen + d.byteLength;
            })
                .reduce(function (p, c) { return p + c; }, 0) +
            2 +
            files
                .map(function (f) {
                var strLen = 2 + Buffer.byteLength(f, "utf8");
                return strLen + 4 + 4;
            })
                .reduce(function (p, c) { return p + c; }, 0);
        return headerSize;
    };
    /**
     * Bubbles to the main filesystem. Stores a buffer
     * and returns the offset it'll be stored at.
     */
    WritableFilesystem.prototype.store = function (buffer) {
        if (this.parent) {
            return this.parent.store(buffer);
        }
        var plen = this.contentLength;
        this.contentBuffers.push(buffer);
        this.contentLength += buffer.byteLength;
        return plen;
    };
    return WritableFilesystem;
}());
exports.WritableFilesystem = WritableFilesystem;
//# sourceMappingURL=filesystem.js.map