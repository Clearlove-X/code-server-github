"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("@coder/logger");
var fs = require("fs-extra");
var glob = require("glob");
var node_fetch_1 = require("node-fetch");
var ora = require("ora");
var os = require("os");
var path = require("path");
var buffer_1 = require("../common/buffer");
var filesystem_1 = require("../common/filesystem");
var footer_1 = require("../common/footer");
var util_1 = require("../common/util");
var Binary = /** @class */ (function () {
    function Binary(options) {
        this.options = options;
        this.fs = new filesystem_1.WritableFilesystem();
    }
    Binary.prototype.writeFile = function (pathName, content) {
        var parts = path
            .normalize(pathName)
            .split(path.sep)
            .filter(function (i) { return i.length; });
        var writableFs = this.fs;
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (i === parts.length - 1) {
                writableFs.write(part, typeof content === "string" ? Buffer.from(content) : content);
            }
            else {
                writableFs = writableFs.cd(part);
            }
        }
    };
    Binary.prototype.writeFiles = function (globName, callback) {
        var files = glob.sync(globName, { cwd: process.cwd() });
        var fileCount = 0;
        var spinner;
        if (logger_1.logger.level <= logger_1.Level.Info) {
            spinner = ora("Writing...");
        }
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            var stat = fs.statSync(file);
            if (!stat.isFile()) {
                continue;
            }
            this.writeFile(file, fs.readFileSync(file));
            if (spinner) {
                spinner.text = "Wrote \"" + file + "\"!";
            }
            if (callback) {
                callback(file);
            }
            ++fileCount;
        }
        if (spinner) {
            spinner.succeed("Wrote " + fileCount + " " + (fileCount === 1 ? "file" : "files") + "!");
        }
        return fileCount;
    };
    Binary.prototype.writeModule = function (modulePath) {
        if (!fs.existsSync(modulePath)) {
            throw new Error("\"" + modulePath + "\" does not exist");
        }
        var paths = glob.sync(path.join(modulePath, "**"));
        var moduleName = path.basename(modulePath);
        for (var i = 0; i < paths.length; i++) {
            var p = paths[i];
            var newPath = path.join("/node_modules", moduleName, path.relative(modulePath, p));
            var stat = fs.statSync(p);
            if (!stat.isFile()) {
                continue;
            }
            this.writeFile(newPath, fs.readFileSync(p));
        }
        logger_1.logger.trace("Packaged module", logger_1.field("module", moduleName));
    };
    Binary.prototype.build = function () {
        return __awaiter(this, void 0, void 0, function () {
            var nodeBuffer, version, versionBuffer, mainFileBuffer, fsBuffer, footerBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cacheBinary()
                        // Create a buffer containing a (most likely) unique ID and its length.
                    ];
                    case 1:
                        nodeBuffer = _a.sent();
                        version = this.version;
                        versionBuffer = Buffer.alloc(2 + Buffer.byteLength(version));
                        buffer_1.writeString(versionBuffer, version);
                        mainFileBuffer = Buffer.alloc(2 + Buffer.byteLength(this.options.mainFile));
                        buffer_1.writeString(mainFileBuffer, this.options.mainFile);
                        logger_1.logger.trace("Building filesystem");
                        fsBuffer = this.fs.build();
                        footerBuffer = footer_1.createFooter(fsBuffer.header.byteLength + versionBuffer.byteLength + mainFileBuffer.byteLength, // Header byte length
                        nodeBuffer.byteLength, // Header byte offset
                        fsBuffer.fileContents.byteLength, // File contents length
                        nodeBuffer.byteLength + fsBuffer.header.byteLength + versionBuffer.byteLength + mainFileBuffer.byteLength // File contents offset
                        );
                        return [2 /*return*/, Buffer.concat([
                                nodeBuffer,
                                versionBuffer,
                                mainFileBuffer,
                                fsBuffer.header,
                                fsBuffer.fileContents,
                                footerBuffer,
                            ])];
                }
            });
        });
    };
    Binary.prototype.cacheBinary = function () {
        return __awaiter(this, void 0, void 0, function () {
            var nodeBinaryPath, nodeBinaryName, cacheDir, binary;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeBinaryPath = this.options.nodePath || path.join(__dirname, "../../lib/node/node");
                        nodeBinaryName = this.nodeBinaryName;
                        return [4 /*yield*/, fs.pathExists(nodeBinaryPath)];
                    case 1:
                        // By default we use the locally compiled node. If that or the provided Node
                        // path doesn't exist then we use the cache directory and will download a
                        // pre-built binary there.
                        if (!(_a.sent())) {
                            cacheDir = util_1.getXdgCacheHome("nbin");
                            nodeBinaryPath = path.join(cacheDir, nodeBinaryName);
                        }
                        return [4 /*yield*/, fs.pathExists(nodeBinaryPath)];
                    case 2:
                        // See if we already have the binary.
                        if (_a.sent()) {
                            logger_1.logger.trace("Returning cached binary", logger_1.field("path", nodeBinaryPath));
                            return [2 /*return*/, fs.readFile(nodeBinaryPath)];
                        }
                        return [4 /*yield*/, this.fetchNodeBinary(nodeBinaryName)];
                    case 3:
                        binary = _a.sent();
                        return [4 /*yield*/, fs.mkdirp(path.dirname(nodeBinaryPath))];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, fs.writeFile(nodeBinaryPath, binary)];
                    case 5:
                        _a.sent();
                        logger_1.logger.trace("Returning written binary", logger_1.field("path", nodeBinaryPath));
                        return [2 /*return*/, binary];
                }
            });
        });
    };
    Binary.prototype.fetchNodeBinary = function (binName) {
        return __awaiter(this, void 0, void 0, function () {
            var url, resp, buffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://nbin.cdr.sh/" + binName;
                        logger_1.logger.trace("Fetching", logger_1.field("url", url));
                        return [4 /*yield*/, node_fetch_1.default(url)];
                    case 1:
                        resp = _a.sent();
                        if (resp.status !== 200) {
                            throw new Error(resp.statusText);
                        }
                        return [4 /*yield*/, resp.arrayBuffer()];
                    case 2:
                        buffer = _a.sent();
                        return [2 /*return*/, Buffer.from(buffer)];
                }
            });
        });
    };
    Object.defineProperty(Binary.prototype, "nodeBinaryName", {
        get: function () {
            var currentPlatform = this.options.target || os.platform();
            var currentArchitecture = os.arch();
            if (currentArchitecture === "x64") {
                currentArchitecture = "x86_64";
            }
            var nodeVersion = "12.14.0";
            var binName = this.version + "/node-" + nodeVersion + "-" + currentPlatform + "-" + currentArchitecture;
            return binName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Binary.prototype, "version", {
        get: function () {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            return require(path.resolve(__dirname, "../../package.json")).version;
        },
        enumerable: true,
        configurable: true
    });
    return Binary;
}());
exports.Binary = Binary;
//# sourceMappingURL=bundler.js.map